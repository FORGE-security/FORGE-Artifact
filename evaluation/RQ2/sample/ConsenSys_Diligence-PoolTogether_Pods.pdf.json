{
    "path": "artifacts/ConsenSys_Diligence-PoolTogether_Pods.pdf",
    "project_info": {
        "url": "n/a",
        "commit_id": "n/a",
        "address": "n/a",
        "chain": "n/a",
        "compiler_version": "n/a",
        "project_path": "n/a"
    },
    "findings": [
        {
            "id": 0,
            "title": "Winning pods can be drained via re-entrancy",
            "description": "Re-entrancy in token transfer allows an attacker to drain the pod.",
            "severity": "Critical",
            "location": "Token transfer function"
        },
        {
            "id": 1,
            "title": "TokenDrop re-entrancy vulnerability",
            "description": "Re-entrancy in claim function can cause draining of funds.",
            "severity": "Major",
            "location": "Claim function"
        },
        {
            "id": 2,
            "title": "Pod token drop inconsistency",
            "description": "Having multiple TokenDrops is inconsistent due to strict asset and measure tokens.",
            "severity": "Medium",
            "location": "TokenDrop mapping"
        },
        {
            "id": 3,
            "title": "Uncontrolled withdrawal fees",
            "description": "Users have no control over withdrawal fees from the pool contract.",
            "severity": "Medium",
            "location": "Withdrawal function"
        },
        {
            "id": 4,
            "title": "Re-entrancy vulnerabilities in deposit and claim functions",
            "description": "Multiple re-entrancy issues in deposit and claim functions can lead to fund draining.",
            "severity": "Critical",
            "location": "Deposit and claim functions"
        },
        {
            "id": 5,
            "title": "ProxyFactory.deployMinimal() does not check for contract creation failure",
            "description": "The deployMinimal() function in ProxyFactory.sol doesn't verify if the proxy contract creation is successful.",
            "severity": "n/a",
            "location": "ProxyFactory.sol, deployMinimal()"
        },
        {
            "id": 6,
            "title": "Pod.setManager() checks validity of wrong address",
            "description": "In Pod.sol, the setManager() function checks the wrong address for validity.",
            "severity": "n/a",
            "location": "Pod.sol, setManager()"
        }
    ]
}